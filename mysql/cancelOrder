DROP PROCEDURE IF EXISTS cancelOrder;

DELIMITER $$

CREATE PROCEDURE cancelOrder ( order_id INT, reason VARCHAR(100), user_id INT)

BEGIN

	DECLARE success BOOLEAN DEFAULT FALSE;
    DECLARE coupon_id INT DEFAULT NULL;

    DECLARE done TINYINT DEFAULT FALSE;
    DECLARE product_inventory_id INT;
    DECLARE c CURSOR FOR SELECT id FROM product_inventory WHERE product_inventory.order_id = order_id;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    START TRANSACTION;
    
    IF EXISTS
                (
                SELECT
                    orders.id
                FROM
                    orders
                WHERE
                    orders.id = order_id AND
                    orders.status = 'IN_PROGRESS' AND
                    orders.payment_status = 'CANCELED'
                LIMIT 1
                )
             THEN

                UPDATE orders SET status = 'CANCELED' WHERE orders.id = order_id;

                OPEN c;

                loop1: LOOP

                    FETCH NEXT FROM c INTO product_inventory_id; 
                    IF done THEN
                        LEAVE loop1; 
                    ELSE
                        INSERT INTO `product_inventory_events`(`date`, `type`, `description`, `product_inventory_id`) VALUES (NOW(), 'STATUS_UPDATE', concat('De: ', 'IN_ORDER', '\nPara: ', 'AVAILABLE', '\nMotivo: ', 'Produto desvinculado do pedido id ', order_id, ' por cancelamento do pedido'), product_inventory_id);

                        UPDATE product_inventory SET status = 'AVAILABLE', product_inventory.order_id = NULL WHERE product_inventory.id = product_inventory_id;
                    END IF;

                END LOOP;

                SELECT orders.coupon_id INTO coupon_id FROM orders WHERE orders.id = order_id;
                IF coupon_id IS NOT NULL THEN
                    UPDATE coupons SET coupons.uses = (coupons.uses - 1) WHERE coupons.id = coupon_id;
                END IF;
                INSERT INTO `order_events`(`date`, `type`, `description`, `order_id`, `user_id`) VALUES (NOW(), 'STATUS_UPDATE', concat('De: ', 'IN_PROGRESS', '\nPara: ', 'CANCELED', '\nMotivo: ', reason), order_id, user_id);
                COMMIT;
                SET success = TRUE;
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'order not found';
        ROLLBACK;
    END IF;
    
    SELECT success;

END; $$

DELIMITER ;

CALL cancelOrder(2);